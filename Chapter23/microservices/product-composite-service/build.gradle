plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'java'
    id 'org.springframework.experimental.aot' version '0.12.1'
}

group = 'se.magnus.microservices.composite.product'
version = '1.0.0-SNAPSHOT'
sourceCompatibility = '1.8'

ext {
    springCloudVersion = "2021.0.3"
    resilience4jVersion = "1.7.0"
}
repositories {
    maven { url 'https://repo.spring.io/release' }
    mavenCentral()
}

// Prevents GraalVM to native compile locally, i.e. without Docker-buildpacks
//jar {
//    enabled = false
//}

dependencies {
    implementation project(':api')
    implementation project(':util')
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-oauth2-resource-server'
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    // implementation 'org.springframework.cloud:spring-cloud-starter-stream-rabbit'
    implementation 'org.springframework.cloud:spring-cloud-starter-stream-kafka'
    // implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
//    implementation 'org.springframework.retry:spring-retry'
//    implementation 'org.springdoc:springdoc-openapi-webflux-ui:1.6.10'
//    implementation 'org.springdoc:springdoc-openapi-native:1.6.10'
//    implementation "io.github.resilience4j:resilience4j-spring-boot2:${resilience4jVersion}"
//    implementation "io.github.resilience4j:resilience4j-reactor:${resilience4jVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'javax.servlet:javax.servlet-api:4.0.1'
    implementation 'jakarta.validation:jakarta.validation-api:2.0.2'

    // See https://github.com/netty/netty/issues/11693
    implementation group: 'io.netty', name: 'netty-resolver-dns-native-macos', classifier: 'osx-aarch_64'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'

    implementation platform('org.testcontainers:testcontainers-bom:1.16.2')
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:kafka'

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
//    dependencies {
//        dependency "io.github.resilience4j:resilience4j-spring:${resilience4jVersion}"
//        dependency "io.github.resilience4j:resilience4j-annotations:${resilience4jVersion}"
//        dependency "io.github.resilience4j:resilience4j-consumer:${resilience4jVersion}"
//        dependency "io.github.resilience4j:resilience4j-core:${resilience4jVersion}"
//        dependency "io.github.resilience4j:resilience4j-circuitbreaker:${resilience4jVersion}"
//        dependency "io.github.resilience4j:resilience4j-ratelimiter:${resilience4jVersion}"
//        dependency "io.github.resilience4j:resilience4j-retry:${resilience4jVersion}"
//        dependency "io.github.resilience4j:resilience4j-bulkhead:${resilience4jVersion}"
//        dependency "io.github.resilience4j:resilience4j-timelimiter:${resilience4jVersion}"
//        dependency "io.github.resilience4j:resilience4j-micrometer:${resilience4jVersion}"
//        dependency "io.github.resilience4j:resilience4j-circularbuffer:${resilience4jVersion}"
//    }
}

test {
    useJUnitPlatform()
    // Tracing agent works with the prod-comp service, but is disabled to avoid changes to the source code, i.e. src/main/resources/META-INF/native-image
    // jvmArgs "-agentlib:native-image-agent=access-filter-file=src/test/resources/access-filter.json,config-output-dir=src/main/resources/META-INF/native-image"

//    testLogging {
//        outputs.upToDateWhen {false}
//        showStandardStreams = true
//    }
}

bootBuildImage {
    builder = "paketobuildpacks/builder:tiny"
    imageName = "hands-on/native-product-composite-service"
    environment = [
        "BP_NATIVE_IMAGE" : "true",
        "BP_JVM_VERSION" : "17",
        "BP_NATIVE_IMAGE_BUILD_ARGUMENTS" : "--enable-url-protocols=http,https --initialize-at-build-time=sun.instrument.InstrumentationImpl"
    ]
}